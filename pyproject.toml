[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tracker"
version = "0.1.0"
description = "Portfolio tracking and analysis toolkit"
readme = "README.md"
license = {text = "MIT"}
keywords = ["portfolio", "finance", "tracking", "analysis", "investment"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial :: Investment",
]
requires-python = ">=3.10"
dependencies = [
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "python-dotenv>=0.19.0",
    "yfinance>=0.1.70",
    "pandas>=1.5.0",
    "numpy>=1.21.0",
    "python-binance>=1.0.15",
    "requests>=2.28.0",
    "alembic>=1.12.0",
    "scipy>=1.10.0",
    "psutil>=7.0.0",
    "streamlit>=1.50.0",
    "plotly>=6.3.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.6",
    "pre-commit>=2.20.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/jarn/tracker"
Repository = "https://github.com/jarn/tracker"
Issues = "https://github.com/jarn/tracker/issues"
Documentation = "https://github.com/jarn/tracker/docs"

[tool.setuptools.packages.find]
where = ["src"]

# Development tools configuration
[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "D",   # pydocstyle
    "N",   # pep8-naming
    "S",   # bandit security
    "T20", # flake8-print
    "RUF", # Ruff-specific rules
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C90", # mccabe complexity
    "DTZ", # flake8-datetimez
    # "EM",  # flake8-errmsg
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "UP017", # Use `datetime.UTC` alias (requires Python 3.11+)
    "C901",  # Function is too complex
    "COM812", # Missing trailing comma (conflicts with formatter)
    "COM819", # Prohibited trailing comma (conflicts with formatter)
    "D105",  # Missing docstring in magic method
    "DTZ001", # Allow datetime without timezone
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["tracker"]
combine-as-imports = true
force-sort-within-sections = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "S101",  # Allow assert statements in tests
    "D",     # No docstring requirements for tests
    "ARG",   # Allow unused arguments (common in test fixtures)
    "PLR2004", # Allow magic values in tests
    "S106",  # Allow hardcoded passwords in tests
    "S108",  # Allow hardcoded temp files in tests
    "T20",   # Allow print statements in tests
    "PT009",   # Allow unittest-style assertions (not pytest)
    "PT012",   # Allow multiple statements in pytest.raises
]
"scripts/*.py" = [
    "T20",   # Allow print statements in scripts
    "D",     # No docstring requirements for scripts
    "S",     # Relax security checks in scripts
]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "--strict-markers --strict-config"
filterwarnings = [
    "ignore::DeprecationWarning:binance.*",
    "ignore::DeprecationWarning:websockets.*",
]

[tool.coverage.run]
source = ["src/tracker"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = ["yfinance.*", "binance.*", "pdfplumber.*", "investpy.*"]
ignore_missing_imports = true
